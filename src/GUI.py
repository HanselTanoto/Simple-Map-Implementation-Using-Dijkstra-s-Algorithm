# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'GUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import timeit
from PyQt5 import QtCore, QtGui, QtWidgets, QtWebEngineWidgets
import os
from pyvis.network import Network
import pandas as pd
import DirectedGraph as dg
import Dijkstra as dj
import ReadFile as rf

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1366, 768)

        font = QtGui.QFont()
        font.setFamily("Lucida Sans")

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.centralwidget.setStyleSheet("background-color: #FFFFFF;")
        MainWindow.setCentralWidget(self.centralwidget)
        
        self.widget1 = QtWidgets.QWidget(self.centralwidget)
        self.widget1.setGeometry(QtCore.QRect(20, 20, 820, 725))
        self.widget1.setObjectName("widget1")

        self.widget1_1 = QtWidgets.QWidget(self.widget1)
        self.widget1_1.setGeometry(QtCore.QRect(10, 10, 800, 705))
        self.widget1_1.setStyleSheet("background-color: #222222;")
        self.widget1_1.setObjectName("widget1_1")
        
        self.webEngineView = QtWebEngineWidgets.QWebEngineView(self.widget1)
        self.webEngineView.setStyleSheet("background-color: #222222;")
        self.webEngineView.setVisible(False)
        self.webEngineView.load(QtCore.QUrl().fromLocalFile(os.path.split(os.path.abspath(__file__))[0]+r'\nodes.html'))
        self.webEngineView.setGeometry(QtCore.QRect(0, 0, 820, 725))
        self.webEngineView.setObjectName("webEngineView")

        self.lineEdit0 = QtWidgets.QLineEdit(self.widget1)
        self.lineEdit0.setGeometry(QtCore.QRect(45, 30, 730, 30))
        self.lineEdit0.setStyleSheet("background-color: #FFFFFF; border-radius: 10px;")
        font.setPointSize(10)
        self.lineEdit0.setFont(font)
        self.lineEdit0.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit0.setText("Path from Source to Destination : ")
        self.lineEdit0.setVisible(False)
        self.lineEdit0.setObjectName("linEedit0")

        self.lineEdit1 = QtWidgets.QLineEdit(self.widget1)
        self.lineEdit1.setGeometry(QtCore.QRect(45, 660, 200, 30))
        self.lineEdit1.setStyleSheet("background-color: #FFFFFF; border-radius: 10px;")
        font.setPointSize(10)
        self.lineEdit1.setFont(font)
        self.lineEdit1.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit1.setText("Distance = ")
        self.lineEdit1.setVisible(False)
        self.lineEdit1.setObjectName("linEedit1")
        
        self.lineEdit2 = QtWidgets.QLineEdit(self.widget1)
        self.lineEdit2.setGeometry(QtCore.QRect(285, 660, 200, 30))
        self.lineEdit2.setStyleSheet("background-color: #FFFFFF; border-radius: 10px;")
        font.setPointSize(10)
        self.lineEdit2.setFont(font)
        self.lineEdit2.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit2.setText("Iteration = ")
        self.lineEdit2.setVisible(False)
        self.lineEdit2.setObjectName("linEedit2")
        
        self.lineEdit3 = QtWidgets.QLineEdit(self.widget1)
        self.lineEdit3.setGeometry(QtCore.QRect(525, 660, 250, 30))
        self.lineEdit3.setStyleSheet("background-color: #FFFFFF; border-radius: 10px;")
        font.setPointSize(10)
        self.lineEdit3.setFont(font)
        self.lineEdit3.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit3.setText("Elapsed Time = ")
        self.lineEdit3.setVisible(False)
        self.lineEdit3.setObjectName("linEedit3")

        self.widget2 = QtWidgets.QWidget(self.centralwidget)
        self.widget2.setStyleSheet("background-color: #222222; border-radius: 25px;")
        self.widget2.setGeometry(QtCore.QRect(860, 20, 475, 250))
        self.widget2.setObjectName("widget2")

        self.lineEdit4 = QtWidgets.QLineEdit(self.widget2)
        #self.lineEdit4.setGeometry(QtCore.QRect(20, 20, 435, 50))
        self.lineEdit4.setGeometry(QtCore.QRect(20, 20, 300, 50))
        self.lineEdit4.setStyleSheet("background-color: #FFFFFF; border-radius: 15px;")
        font.setPointSize(14)
        self.lineEdit4.setFont(font)
        self.lineEdit4.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit4.setPlaceholderText("Enter File Name")
        self.lineEdit4.setObjectName("lineEdit4")

        self.button1 = QtWidgets.QPushButton(self.widget2)
        self.button1.setGeometry(QtCore.QRect(345, 20, 110, 50))
        self.button1.setStyleSheet("background-color: #FFFFFF; border-radius: 15px;")
        font.setPointSize(14)
        self.button1.setFont(font)
        self.button1.setText("SHOW")
        self.button1.setObjectName("button1")

        self.widget2_1 = QtWidgets.QWidget(self.widget2)
        self.widget2_1.setGeometry(QtCore.QRect(20, 90, 205, 50))
        self.widget2_1.setStyleSheet("background-color: #FFFFFF; border-radius: 15px;")
        self.widget2_1.setObjectName("widget2_1")

        self.comboBox1 = QtWidgets.QComboBox(self.widget2)
        self.comboBox1.setGeometry(QtCore.QRect(25, 95, 195, 40))
        self.comboBox1.setStyleSheet("background-color: #FFFFFF;")
        font.setPointSize(10)
        self.comboBox1.setEditable(True)
        self.comboBox1.lineEdit().setPlaceholderText("Source Node")
        self.comboBox1.lineEdit().setFont(font)
        self.comboBox1.lineEdit().setAlignment(QtCore.Qt.AlignCenter)
        self.comboBox1.setObjectName("comboBox1")

        self.widget2_2 = QtWidgets.QWidget(self.widget2)
        self.widget2_2.setGeometry(QtCore.QRect(250, 90, 205, 50))
        self.widget2_2.setStyleSheet("background-color: #FFFFFF; border-radius: 15px;")
        self.widget2_2.setObjectName("widget2_2")

        self.comboBox2 = QtWidgets.QComboBox(self.widget2)
        self.comboBox2.setGeometry(QtCore.QRect(255, 95, 195, 40)) 
        self.comboBox2.setStyleSheet("background-color: #FFFFFF;")
        font.setPointSize(10)
        self.comboBox2.setEditable(True)
        self.comboBox2.lineEdit().setPlaceholderText("Destination Node")
        self.comboBox2.lineEdit().setFont(font)
        self.comboBox2.lineEdit().setAlignment(QtCore.Qt.AlignCenter)
        self.comboBox2.setObjectName("comboBox2")
        
        self.button2 = QtWidgets.QPushButton(self.widget2)
        self.button2.setGeometry(QtCore.QRect(20, 160, 435, 50))
        self.button2.setStyleSheet("background-color: #FFFFFF; border-radius: 15px;")
        font.setPointSize(14)
        self.button2.setFont(font)
        self.button2.setObjectName("button2")
        self.button2.setText("FIND PATH")

        self.line1 = QtWidgets.QFrame(self.widget2)
        self.line1.setGeometry(QtCore.QRect(20, 225, 435, 7))
        self.line1.setFrameShape(QtWidgets.QFrame.HLine)
        self.line1.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line1.setObjectName("line1")
        self.line1.setStyleSheet("background-color: #FFFFFF; border-radius: 15px;")
        
        self.widget3 = QtWidgets.QWidget(self.centralwidget)
        self.widget3.setStyleSheet("background-color: #222222; border-radius: 25px;")
        self.widget3.setGeometry(QtCore.QRect(860, 300, 475, 440))
        self.widget3.setObjectName("widget3")

        self.label1 = QtWidgets.QLabel(self.widget3)
        self.label1.setGeometry(QtCore.QRect(20, 10, 435, 30))
        self.label1.setStyleSheet("background-color: rgba(0,0,0,0); color: #FFFFFF;")
        font.setPointSize(14)
        self.label1.setFont(font)
        self.label1.setAlignment(QtCore.Qt.AlignCenter)
        self.label1.setObjectName("label1")
        self.label1.setText("STEP")

        self.tableWidget = QtWidgets.QTableWidget(self.widget3)
        self.tableWidget.setGeometry(QtCore.QRect(20, 50, 435, 370))
        self.tableWidget.setStyleSheet("background-color: #222222; gridline-color: #FFFFFF; border: 1px solid #FFFFFF; border-radius: 0px;")
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(2)
        self.tableWidget.setHorizontalHeaderLabels(["Step", "Distance"])
        self.tableWidget.horizontalHeader().setStyleSheet("background-color: #FFFFFF;")
        self.tableWidget.horizontalHeader().setStretchLastSection(True)
        self.tableWidget.verticalHeader().setVisible(False)
        self.tableWidget.setGridStyle(QtCore.Qt.SolidLine)
        """self.tableWidget.setRowCount(1)
        self.tableWidget.setItem(0, 0, QtWidgets.QTableWidgetItem("1"))
        self.tableWidget.setItem(0, 1, QtWidgets.QTableWidgetItem("aaaaaaaaaaaaaaaaa\naaaaaaa\naaaaaaaaaaaaaaaaaaaa"))
        self.tableWidget.resizeRowsToContents()
        self.tableWidget.resizeColumnsToContents()
        for i in range(self.tableWidget.rowCount()):
            for j in range(self.tableWidget.columnCount()):
                self.tableWidget.item(i, 0).setTextAlignment(QtCore.Qt.AlignCenter)
                self.tableWidget.item(i, j).setForeground(QtGui.QBrush(QtGui.QColor(255, 255, 255)))"""
       
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
    
    def main(self):
        print("show button clicked")
        self.button1.clicked.connect(lambda: self.showClicked())
    
    def showClicked(self):
        print("show button clicked")
        file_name = self.lineEdit4.text()
        graph = rf.read_file(file_name)
        graph = dg.DirectedGraph(graph)
        graph.print_graph()
        net = Network(height="700px", width="800", bgcolor="#222222", font_color="black", directed=True)
        for i in range(graph.nodes):
            net.add_node(i, label=str(i), title=str(i), shape="circle", color="#3DFF94", labelHighlightedBold=True)
        for i in range(graph.nodes):
            for j in range(graph.nodes):
                if graph.matrix[i][j] != 0:
                    net.add_edge(i, j, weight=graph.matrix[i][j], label=str(graph.matrix[i][j]), color="#00C8FF")
        net.save_graph('nodes.html')
        self.webEngineView.setVisible(True)
        self.webEngineView.load(QtCore.QUrl().fromLocalFile(os.path.split(os.path.abspath(__file__))[0]+r'\nodes.html'))
        self.button2.clicked.connect(lambda: self.findClicked(graph))
    
    def findClicked(self, graph):
        print("find button clicked")
        start = self.comboBox1.currentText()
        end = self.comboBox2.currentText()
        """print(start)
        print(end)
        print(graph.nodes)"""
        if start == "" or end == "":
            self.label1.setText("Please enter a valid start and end node")
            return
        if int(start) not in range(graph.nodes) or int(end) not in range(graph.nodes):
            self.label1.setText("Please enter a valid start and end node")
            return
        time = timeit.default_timer()
        dijkstra = dj.Dijkstra(graph, int(start), int(end))
        time = timeit.default_timer() - time
        
        self.tableWidget.setRowCount(dijkstra.iterate)
        for i in range(dijkstra.iterate):
            self.tableWidget.setItem(i, 0, QtWidgets.QTableWidgetItem(str(i+1)))
            self.tableWidget.setItem(i, 1, QtWidgets.QTableWidgetItem(dijkstra.get_step_info(i)))
        self.tableWidget.resizeRowsToContents()
        self.tableWidget.resizeColumnsToContents()
        for i in range(self.tableWidget.rowCount()):
            for j in range(self.tableWidget.columnCount()):
                self.tableWidget.item(i, 0).setTextAlignment(QtCore.Qt.AlignCenter)
                self.tableWidget.item(i, j).setForeground(QtGui.QBrush(QtGui.QColor(255, 255, 255)))

        net = Network(height="700px", width="800", bgcolor="#222222", font_color="black", directed=True)
        for i in range(graph.nodes):
            if (i in dijkstra.path):
                net.add_node(i, label=str(i), title=str(i), shape="circle", color="yellow", labelHighlightedBold=True)
            else:
                net.add_node(i, label=str(i), title=str(i), shape="circle", color="#3DFF94", labelHighlightedBold=True)
        for i in range(graph.nodes):
            for j in range(graph.nodes):
                if graph.matrix[i][j] != 0:
                    if (str(i)+str(j)) in ("".join(str(e) for e in dijkstra.path)):
                        net.add_edge(i, j, weight=graph.matrix[i][j], label=str(graph.matrix[i][j]), color="red", width=4)
                    else:
                        net.add_edge(i, j, weight=graph.matrix[i][j], label=str(graph.matrix[i][j]), color="#00C8FF")
        net.save_graph('nodes.html')
        self.webEngineView.setVisible(True)
        self.webEngineView.load(QtCore.QUrl().fromLocalFile(os.path.split(os.path.abspath(__file__))[0]+r'\nodes.html'))

        self.lineEdit0.setVisible(True)
        self.lineEdit0.setText(self.lineEdit0.text() + dijkstra.get_path_str())
        self.lineEdit1.setVisible(True)
        self.lineEdit1.setText(self.lineEdit1.text() + str(dijkstra.distance))
        self.lineEdit2.setVisible(True)
        self.lineEdit2.setText(self.lineEdit2.text() + str(dijkstra.iterate))
        self.lineEdit3.setVisible(True)
        self.lineEdit3.setText(self.lineEdit3.text() + "{:.2f} ms".format(time*1000))
        

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    ui.main()
    MainWindow.show()
    sys.exit(app.exec_())
